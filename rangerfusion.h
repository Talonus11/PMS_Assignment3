#ifndef RANGERFUSION_H
#define RANGERFUSION_H

#include "ranger.h"


/**
 * @brief
 * RangerFusion is used to fuse together the arrays of data generated by the array of Rangers that is passed into each function. Essentially, this means that RangerFusion takes an input array of 3 Rangers, each with an array of generated sensor values, and depending on the method specified by the user it will combine these 3 arrays into a single output array.
 * The RangerFusion method relies on the idea that all arrays passed into it have a size of 13. This is all values between 0 and 180 degrees, at 15 degree intervals.
 * Any values that are not populated by their relevant sensor classes are treated as NULL, or 0. Built into RangerFusion is a sweeper that disregards these values
 * from calculations */
class RangerFusion
{
public:
    /**
     * @brief
     *
     */
    RangerFusion();
    /**
     * @brief
     * minFusion is called for creating an array of MINIMUM values based on the array of Rangers that is passed in.
     * This method also ensures that any values that are NULL (that is, zero), or have been clipped by the generator because they are outside the range of the sensor, are disregarded as unreliable information. Thus they are not factored into any calculation.
     * @param rangerArray[]
     */
    void minFusion(Ranger* rangerArray[3]);
    /**
     * @brief
     * minFusion is called for creating an array of AVERAGE values based on the array of Rangers that is passed in.
     * This method also ensures that any values that are NULL (that is, zero), or have been clipped by the generator because they are outside the range of the sensor, are disregarded as unreliable information. Thus they are not factored into any calculation.
     * @param rangerArray[]
     */
    void avgFusion(Ranger* rangerArray[3]);
    /**
     * @brief
     * minFusion is called for creating an array of MAXIMUM values based on the array of Rangers that is passed in.
     * This method also ensures that any values that are NULL (that is, zero), or have been clipped by the generator because they are outside the range of the sensor, are disregarded as unreliable information. Thus they are not factored into any calculation.
     * @param rangerArray[]
     */
    void maxFusion(Ranger* rangerArray[3]);
    /**
     * @brief
     * returns the fused array that is generated by minFusion, avgFusion or maxFusion, so that it is accessible to main()
     * @return double
     */
    double* getArray();

private:
    double fusedArray[13]; /**< array of 13 values that minFusion, avgFusion or maxFusion stores their calculated "fused" values in */
};

#endif // RANGERFUSION_H
